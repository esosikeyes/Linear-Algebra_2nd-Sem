{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled4.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyO/mUa6z5N3mpsUkiy5Z5q7",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/esosikeyes/Linear-Algebra_2nd-Sem/blob/main/Laboratory%201%20-%20Finals\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Plotting Vector using NumPy and MatPlotLib"
      ],
      "metadata": {
        "id": "SkhuzjqfjsBs"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "In this laboratory we will be discussing the basics of numerical and scientific programming by working with Vectors using NumPy and MatPlotLib."
      ],
      "metadata": {
        "id": "MGVcjE6jjw4r"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Objectives\n",
        "At the end of this activity you will be able to:\n",
        "1. Be familiar with the libraries in Python for numerical and scientific programming.\n",
        "2. Visualize vectors through Python programming.\n",
        "3. Perform simple vector operations through code."
      ],
      "metadata": {
        "id": "2AVk5MJDjzCn"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Discussion"
      ],
      "metadata": {
        "id": "vAAtgw6mj1M6"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### NumPy"
      ],
      "metadata": {
        "id": "RjTP0elQj3Fi"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "NumPy or Numerical Python, is mainly used for matrix and vector operations. It is capable of declaring computing and representing matrices. Most Python scientific programming libraries uses NumPy as the basic code."
      ],
      "metadata": {
        "id": "N8DBMv2hj5Mc"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Scalars \\\\\n",
        "Represent magnitude or a single value\n",
        "\n",
        "Vectors \\\\\n",
        "Represent magnitude with directors"
      ],
      "metadata": {
        "id": "-OfGkf5qj67h"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Representing Vectors"
      ],
      "metadata": {
        "id": "BhOQc-2Vj9KL"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Now that you know how to represent vectors using their component and matrix form we can now hard-code them in Python. Let's say that you have the vectors:"
      ],
      "metadata": {
        "id": "RPshdte6kAek"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "$$ A = 4\\hat{x} + 3\\hat{y} \\\\\n",
        "B = 2\\hat{x} - 5\\hat{y}\\\\\n",
        "C = 4ax + 3ay - 2az \\\\\n",
        "D = 2\\hat{i} - 2\\hat{j} + 3\\hat{k}$$"
      ],
      "metadata": {
        "id": "U4CtveDekC4I"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "In which it's matrix equivalent is:"
      ],
      "metadata": {
        "id": "yLKQFn2ekEwu"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "$$ A = \\begin{bmatrix} 4 \\\\ 3\\end{bmatrix} , B = \\begin{bmatrix} 2 \\\\ -5\\end{bmatrix} , C = \\begin{bmatrix} 4 \\\\ 3 \\\\  -2 \\end{bmatrix}, D = \\begin{bmatrix} 2 \\\\ -2 \\\\ 3\\end{bmatrix}\n",
        "$$\n",
        "$$ A = \\begin{bmatrix} 4 & 3\\end{bmatrix} , B = \\begin{bmatrix} 2 & -5\\end{bmatrix} , C = \\begin{bmatrix} 4 & 3 & -2\\end{bmatrix} , D = \\begin{bmatrix} 2 & -2 & 3\\end{bmatrix} \n",
        "$$"
      ],
      "metadata": {
        "id": "qC2rdK4ukGwC"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "We can then start doing numpy code with this by:"
      ],
      "metadata": {
        "id": "V_AgqC5PkIh6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "## Importing necessary libraries\n",
        "import numpy as np ## 'np' here is short-hand name of the library (numpy) or a nickname."
      ],
      "metadata": {
        "id": "jzls657qkM85"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "A = np.array([4, 3])\n",
        "B = np.array([2, -5])\n",
        "C = np.array([\n",
        "              [4],\n",
        "              [3],\n",
        "              [-2]\n",
        "])\n",
        "D = np.array ([[2],\n",
        "              [-2],\n",
        "              [3]])\n",
        "print('Vector A is ', A)\n",
        "print('Vector B is ', B)\n",
        "print('Vector C is ', C)\n",
        "print('Vector D is ', D)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OstYY0RmkNai",
        "outputId": "c39b8a72-8e67-4099-a7b0-8f0b5605e033"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Vector A is  [4 3]\n",
            "Vector B is  [ 2 -5]\n",
            "Vector C is  [[ 4]\n",
            " [ 3]\n",
            " [-2]]\n",
            "Vector D is  [[ 2]\n",
            " [-2]\n",
            " [ 3]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Describing vectors in NumPy"
      ],
      "metadata": {
        "id": "x-0V2IHWkQ7k"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Describing vectors is very important if we want to perform basic to advanced operations with them. The fundamental ways in describing vectors are knowing their shape, size and dimensions."
      ],
      "metadata": {
        "id": "UvVHHIVykRTG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "### Checking shapes\n",
        "### Shapes tells us how many elements are there on each row and column\n",
        "\n",
        "A.shape\n",
        "H = np.array([1, 0, 2, 5, -0.2, 0])\n",
        "H.shape\n",
        "C.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iH30moCokWxB",
        "outputId": "5294ffdf-afb6-462a-e9c0-1fdc2214645f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(3, 1)"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "### Checking size\n",
        "### Array/Vector sizes tells us many total number of elements are there in the vector\n",
        "\n",
        "D.size"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pyAW4P6CkXLc",
        "outputId": "d277449f-b567-4b11-abc8-9cc9134c95f5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "### Checking dimensions\n",
        "### The dimensions or rank of a vector tells us how many dimensions are there for the vector.\n",
        "\n",
        "D.ndim"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1gT2YjDikYpM",
        "outputId": "bbe75073-3b8a-46aa-e3ac-a4ca80b9380f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Great! Now let's try to explore in performing operations with these vectors."
      ],
      "metadata": {
        "id": "-0qF5dFSkbzx"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Addition"
      ],
      "metadata": {
        "id": "FJK_9CvXkcMe"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "The addition rule is simple, the we just need to add the elements of the matrices according to their index. So in this case if we add vector $A$ and vector $B$ we will have a resulting vector:"
      ],
      "metadata": {
        "id": "Map5yoROkeIl"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "$$R = 6\\hat{x}-2\\hat{y} \\\\ \\\\or \\\\ \\\\ R = \\begin{bmatrix} 6 \\\\ -2\\end{bmatrix} $$"
      ],
      "metadata": {
        "id": "ZQ_trbiTkg00"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "So let's try to do that in NumPy in several number of ways:"
      ],
      "metadata": {
        "id": "NwWOJ-4Zkil7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "R = np.add(A, B) ## this is the functional method usisng the numpy library\n",
        "P = np.add(C, D)"
      ],
      "metadata": {
        "id": "0R4UPQ07kkoC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "R = A + B   ## this is the explicit method, since Python does a value-reference so it can \n",
        "            ## know that these variables would need to do array operations.\n",
        "R"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qNeVUkdtkmFr",
        "outputId": "61d75176-3f31-4803-c3d9-13d210a8f2f0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 6, -2])"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pos1 = np.array([0,0,0])\n",
        "pos2 = np.array([0,1,3])\n",
        "pos3 = np.array([1,5,-2])\n",
        "pos4 = np.array([5,-3,3])\n",
        "#R = pos1 + pos2 + pos3 + pos4\n",
        "#R = np.multiply(pos3, pos4)\n",
        "R = pos3 / pos4\n",
        "R"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "U8J8NykMknfh",
        "outputId": "6608b9dc-e3a4-434b-d604-9344b51da616"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 0.2       , -1.66666667, -0.66666667])"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##### Try for yourself!"
      ],
      "metadata": {
        "id": "4McMIpACkqxW"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Try to implement subtraction, multiplication, and division with vectors $A$ and $B$!"
      ],
      "metadata": {
        "id": "JLGrsZRiksXM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "### Try out you code here! \n",
        "\n"
      ],
      "metadata": {
        "id": "nvx8sUp-kwMK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Scaling"
      ],
      "metadata": {
        "id": "NTwY8zh_kwr_"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Scaling or scalar multiplication takes a scalar value and performs multiplication with a vector. Let's take the example below:"
      ],
      "metadata": {
        "id": "jnExAn0_kyVs"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "$$S = 5 \\cdot A$$"
      ],
      "metadata": {
        "id": "cJzQjDI_k02I"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "We can do this in numpy through:"
      ],
      "metadata": {
        "id": "FfSoXpmMk3FR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#S = 5 * A\n",
        "S = np.multiply(5,A)\n",
        "S"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wZrEcCWWk6xr",
        "outputId": "bc8af3ae-2eb6-4a97-c399-7c06f7bc4ea0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([20, 15])"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Try to implement scaling with two vectors."
      ],
      "metadata": {
        "id": "nh0--_AXk40T"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### MatPlotLib"
      ],
      "metadata": {
        "id": "MIwULFYCk9tW"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "MatPlotLib or MATLab Plotting library is Python's take on MATLabs plotting feature. MatPlotLib can be used vastly from graping values to visualizing several dimensions of data."
      ],
      "metadata": {
        "id": "zIy4PPL9k_Nh"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Visualizing Data"
      ],
      "metadata": {
        "id": "oJ7v8MkjlBBi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import matplotlib\n",
        "%matplotlib inline"
      ],
      "metadata": {
        "id": "7-lFxdm9lEv5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "A = [1, -1]\n",
        "B = [5, -1]\n",
        "plt.scatter(A[0], A[1], label='A', c='green')\n",
        "plt.scatter(B[0], B[1], label='B', c='magenta')\n",
        "plt.grid()\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "PyVVM8cNlFGx",
        "outputId": "7b80a6e8-e560-4308-c6c7-458cd329025f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYIAAAD4CAYAAADhNOGaAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAU/0lEQVR4nO3df5Bd9X3e8fcHSbYQSwURdMFe0GqMSYYYLFgNtieeFAU7lXFijI0TURlDa3XHaRlCU5pA1YmbzGjGHjsJk8RTDzXpKMmiNUMsBEZG5odkYFywJZdYgMBWXQnWVguRseRFKEHi0z/ukVit7kr37tndu9L3/Zq5s+fH95zz6MCeR/ecu6vITCRJ5Tqp0wEkSZ1lEUhS4SwCSSqcRSBJhbMIJKlwMzsdYDzOOOOM7O3tHde2r776KqeccsrEBpoA5mqPudpjrvacqLk2b978D5l55hErMvO4e/X19eV4bdiwYdzbTiZztcdc7TFXe07UXMCmbHJN9daQJBXOIpCkwlkEklS44/JhsSR1wuuvv87Q0BD79u3ryPHnzp3L1q1bjzlu9uzZ9PT0MGvWrJb2axFIUouGhoY49dRT6e3tJSKm/Pg///nPOfXUU486JjPZtWsXQ0NDLFiwoKX9emtIklq0b98+5s2b15ESaFVEMG/evLbetVgEktSG6VwCB7Wb0SKQpMJZBJJ0nLnnnnuICJ577rkJ2Z9FIEnHmdWrV/P+97+f1atXT8j+LAJJmiQDWwbova2Xk/7oJHpv62Vgy0DtfQ4PD/P4449zxx13MDg4OAEpLQJJmhQDWwbov6+fHbt3kCQ7du+g/77+2mWwdu1alixZwvnnn8+8efPYvHlz7awWgSRNghUPr2Dv63sPW7b39b2seHhFrf2uXr2apUuXArB06dIJuT3kD5RJ0iR4YfcLbS1vxU9/+lMeeeQRtmzZQkRw4MABIoIvfOELtT7W6jsCSZoE5849t63lrVi7di3XXnstO3bsYPv27bz44ossWLCAxx57bNz7BItAkibFystXMmfWnMOWzZk1h5WXrxz3Pu+++26uuuqqw5Z9/OMfr317yFtDkjQJll24DGg8K3hh9wucO/dcVl6+8tDy8bj//vuP+F1DN954Y62cYBFI0qRZduGyWhf+qeKtIUkqnEUgSYWzCCSpcBaBJBXOIpCkwlkEknQcmTFjBgsXLuTd7343l1xyCd/+9rdr79OPj0rSceTkk0/mqaeeAmD9+vXceuutfOtb36q1z1rvCCLiFyLiwYj4YfX19DHGfT4inq5evz1ieUTEyoj4QURsjYj6PxkhSdPFANBL40rbW81PoD179nD66U0vu22p+47gFuDhzPxcRNxSzf/ByAER8WHgEmAh8FZgY0R8IzP3ANcD5wC/lJlvRMQ/r5lHkqaHAaAfOPgLSHdU8wA1fsbstddeY+HChezbt4+dO3fyyCOP1IoJ9Z8RXAmsqqZXAR9tMuYC4NHM3J+ZrwLfB5ZU634H+OPMfAMgM1+qmUeSpocVvFkCB+2tltdw8NbQc889xwMPPMCnPvUpMrPWPqPODiLiZ5l5WjUdwCsH50eM+XXgs8AHgTnAd4AvZeafRMQu4E+Bq4CXgRsz84djHKufqk+7u7v7xvsv8wwPD9PV1TWubSeTudpjrvaYqz1j5Zo7dy7nnXdeS/vomttF5JG/GjojGd49PK5cBw4coKenh507dx5a9o53vIMnnniCM88887Cx27ZtY/fu3YctW7x48ebMXHRkqMyjvoCHgKebvK4EfjZq7Ctj7GMF8BTwII03TDdVy4eB/1hNfwx47Fh5MpO+vr4crw0bNox728lkrvaYqz3mas9YuZ599tnWdzI/m1/B5o8/1549e/KUU045NL9169acN29e7t+/v6WswKZmqY75jCAzPzDWuoj4fxFxdmbujIizgaa3djJzJbCy2uZO4AfVqiHga9X0GuB/HCuPJB0XVnL4MwJo3BMZ/2+hBt58RgCNv8ivWrWKGTNm1Npn3YfF9wLXAZ+rvq4dPSAiZgCnZeauiLgIuAj4ZrX6HmAx8H+Af8GbBSFJx7eDD4RXAC8A59IogZq/jPTAgQP1dtBE3SL4HHBXRHyaxjPx3wKIiEXAZzJzOTALeKz6Z9T2AJ/MzP0jth+IiP9A4zbR8pp5JGn6WEbtC/9UqFUEmbkLuLzJ8k1UF/XM3Efjk0PNtv8Z8OE6GSRJ9fgrJiSpDVnzo5pTod2MFoEktWj27Nns2rVrWpdBZrJr1y5mz57d8jb+riFJalFPTw9DQ0O8/PLLHTn+vn37WrrAz549m56enpb3axFIUotmzZrFggULOnb8jRs3cvHFF0/4fr01JEmFswgkqXAWgSQVziKQpMJZBJJUOItAkgpnEUhS4SwCSSqcRSBJhbMIJKlwFoEkFc4ikKTCWQSSVDiLQJIKZxFIUuEsAkkqnEUgSYWzCCSpcBaBJBXOIpCkwlkEklQ4i0CSCmcRSFLhLAJJKpxFIEmFswgkqXC1iiAifiEiHoyIH1ZfTx9j3Ocj4unq9dsjll8eEd+LiKci4vGIOK9OHklS++q+I7gFeDgz3wk8XM0fJiI+DFwCLATeA9wcEf+sWv3fgGWZuRC4E/gvNfNIktpUtwiuBFZV06uAjzYZcwHwaGbuz8xXge8DS6p1CRwshbnAT2rmkSS1aWbN7bszc2c1/X+B7iZj/h74bET8CTAHWAw8W61bDqyLiNeAPcB7a+aRJLUpMvPoAyIeAs5qsmoFsCozTxsx9pXMPOI5QUSsAD4BvAy8BHw3M2+LiK8Bn8/MJyPiPwG/mJnLx8jRD/QDdHd39w0ODrb0BxxteHiYrq6ucW07mczVHnO1x1ztOVFzLV68eHNmLjpiRWaO+wU8D5xdTZ8NPN/CNncCVwBnAv97xPJzgWdbOW5fX1+O14YNG8a97WQyV3vM1R5ztedEzQVsyibX1LrPCO4FrqumrwPWjh4QETMiYl41fRFwEfBN4BVgbkScXw39ILC1Zh5JUpvqPiP4HHBXRHwa2AH8FkBELAI+k43bPLOAxyICGs8BPpmZ+6tx/xb4u4h4g0Yx/JuaeSRJbapVBJm5C7i8yfJNNB4Ek5n7aHxyqNn2a4A1dTJIkurxJ4slqXAWgSQVziKQpMJZBJJUOItAkgpnEUhS4SwCSSqcRSBJhbMIJKlwFoEkFc4ikKTCWQSSVDiLQJIKZxFIUuEsAkkqnEUgSYWzCCSpcBaBJBXOIpCkwlkEklQ4i0CSCmcRSFLhLAJJKpxFIEmFswgkqXAWgSQVziKQpMJZBJJUOItAkgpnEUhS4SwCSSpcrSKIiE9ExDMR8UZELDrKuCUR8XxEbIuIW0YsXxART1bLvxoRb6mT52gGtgzQe1svm3dupve2Xga2DEzWoSRpYg0AvcDm6usEX77qviN4GvgY8OhYAyJiBvAl4EPABcA1EXFBtfrzwJ9l5nnAK8Cna+ZpamDLAP339bNj9w4AduzeQf99/ZaBpOlvAOgHdlTzO6r5Cbx81SqCzNyamc8fY9ilwLbM/FFm/hMwCFwZEQH8GnB3NW4V8NE6ecay4uEV7H1972HL9r6+lxUPr5iMw0nSxFkB7B21bG+1fIJEZtbfScRG4ObM3NRk3dXAksxcXs1fC7wH+K/AE9W7ASLiHOAbmfmuMY7RT6MH6e7u7hscHGw53+admw9N97y1h6F/HDo033d2X8v7mUzDw8N0dXV1OsYRzNUec7XHXC148/LFcM8wXUMjcrV5+Vq8ePHmzDziNv7MY20YEQ8BZzVZtSIz17YXY/wy83bgdoBFixblZZdd1vK21992/aHbQl88/4vc/IObAZg/dz7br9k+0VHHZePGjbTzZ5oq5mqPudpjrhZcz6HbQhu/uJHLbr6sMTMf2D4xhzjmraHM/EBmvqvJq9US+DFwzoj5nmrZLuC0iJg5avmEW3n5SubMmnPYsjmz5rDy8pWTcThJmjgrgTmjls2plk+Qqfj46HeBd1afEHoLsBS4Nxv3pDYAV1fjrgMm5R3GsguXcftv3s78ufOBxjuB23/zdpZduGwyDidJE2cZjXsh86v5+dX8BF6+6n589KqIGALeB9wfEeur5W+LiHUAmbkfuAFYD2wF7srMZ6pd/AHwexGxDZgH3FEnz9Esu3AZ22/aTt/ZfWy/abslIOn4sYzGbaC+6usEX76O+YzgaDJzDbCmyfKfAFeMmF8HrGsy7kc0PlUkSeoQf7JYkgpnEUhS4SwCSSqcRSBJhbMIJKlwFoEkFc4ikKTCWQSSVDiLQJIKZxFIUuEsAkkqnEUgSYWzCCSpcBaBJBXOIpCkwlkEklQ4i0CSCmcRSFLhLAJJKpxFIEmFswgkqXAWgSQVziKQpMJZBJJUOItAkgpnEUhS4SwCSSqcRSBJhbMIJKlwFoEkFa5WEUTEJyLimYh4IyIWHWXckoh4PiK2RcQtI5YPVMufjoi/iohZdfJIktpX9x3B08DHgEfHGhARM4AvAR8CLgCuiYgLqtUDwC8BFwInA8tr5pEktWlmnY0zcytARBxt2KXAtsz8UTV2ELgSeDYz1x0cFBHfAXrq5JEktW8qnhG8HXhxxPxQteyQ6pbQtcADU5BHkjRCZObRB0Q8BJzVZNWKzFxbjdkI3JyZm5psfzWwJDOXV/PXAu/JzBtGjPnvwKuZedNRcvQD/QDd3d19g4ODx/ijNTc8PExXV9e4tp1M5mqPudpjrvacqLkWL168OTOPfJ6bmbVfwEZg0Rjr3gesHzF/K3DriPnPAvcAJ7V6vL6+vhyvDRs2jHvbyWSu9pirPeZqz4maC9iUTa6pU3Fr6LvAOyNiQUS8BVgK3AsQEcuBfwlck5lvTEEWSdIodT8+elVEDNH4W//9EbG+Wv62iFgHkJn7gRuA9cBW4K7MfKbaxZeBbuB/RsRTEfGHdfJIktpX91NDa4A1TZb/BLhixPw6YF2TcbWOL0mqz58slqTCWQSSVDiLQJIKZxFIUuEsAkkqnEUgSYWzCCSpcBaBJBXOIpCkwlkEklQ4i0CSCmcRSFLhLAJJKpxFIEmFswgkqXAWgSQVziKQpMJZBJJUOItAkgpnEUhS4SwCSSqcRSBJhbMIJKlwFoEkFc4ikKTCWQSSVDiLQJIKZxFIUuEsAkkqnEUgSYWzCCSpcLWKICI+ERHPRMQbEbHoKOOWRMTzEbEtIm5psv7PI2K4ThZJ0vjUfUfwNPAx4NGxBkTEDOBLwIeAC4BrIuKCEesXAafXzCFJGqdaRZCZWzPz+WMMuxTYlpk/ysx/AgaBK+FQSXwB+P06OSRJ4xeZWX8nERuBmzNzU5N1VwNLMnN5NX8t8J7MvCEifhc4KTP/LCKGM7PrKMfoB/oBuru7+wYHB8eVdXh4mK6uMQ/TMeZqj7naY672nKi5Fi9evDkzj7yNn5lHfQEP0bgFNPp15YgxG4FFY2x/NfCVEfPXAn8JvA14HJhZLR8+VpaDr76+vhyvDRs2jHvbyWSu9pirPeZqz4maC9iUTa6pM4/VIJn5gXHXT8OPgXNGzPdUyy4GzgO2RQTAnIjYlpnn1TyeJKkNxyyCCfBd4J0RsYBGASwF/lVmPgOcdXBQdWvIEpCkKVb346NXRcQQ8D7g/ohYXy1/W0SsA8jM/cANwHpgK3BXVQKSpGmg1juCzFwDrGmy/CfAFSPm1wHrjrGv6fdkRpIK4E8WS1LhLAJJKpxFIEmFswgkqXAWgSQVziKQpMJZBJJUOItAkgpnEUhS4SwCSSqcRSBJhbMIJKlwFoEkFc4ikKTCWQSSVDiLQJIKZxFIUuEsAkkqnEUgSYWzCCSpcBaBJBXOIpCkwlkEklQ4i0CSCheZ2ekMbYuIl4Ed49z8DOAfJjDORDFXe8zVHnO150TNNT8zzxy98LgsgjoiYlNmLup0jtHM1R5ztcdc7Sktl7eGJKlwFoEkFa7EIri90wHGYK72mKs95mpPUbmKe0YgSTpcie8IJEkjWASSVLgTsggi4q8i4qWIeHqM9RERfx4R2yLi+xFxyTTJdVlE7I6Ip6rXH05RrnMiYkNEPBsRz0TE7zYZM+XnrMVcU37OImJ2RHwnIv6+yvVHTca8NSK+Wp2vJyOid5rkuj4iXh5xvpZPdq4Rx54REf8rIr7eZN2Un68Wc3XkfEXE9ojYUh1zU5P1E/v9mJkn3Av4VeAS4Okx1l8BfAMI4L3Ak9Mk12XA1ztwvs4GLqmmTwV+AFzQ6XPWYq4pP2fVOeiqpmcBTwLvHTXm3wFfrqaXAl+dJrmuB/5yqv8fq479e8Cdzf57deJ8tZirI+cL2A6ccZT1E/r9eEK+I8jMR4GfHmXIlcBfZ8MTwGkRcfY0yNURmbkzM79XTf8c2Aq8fdSwKT9nLeaactU5GK5mZ1Wv0Z+6uBJYVU3fDVweETENcnVERPQAHwa+MsaQKT9fLeaarib0+/GELIIWvB14ccT8ENPgAlN5X/XW/hsR8ctTffDqLfnFNP42OVJHz9lRckEHzll1O+Ep4CXgwcwc83xl5n5gNzBvGuQC+Hh1O+HuiDhnsjNVbgN+H3hjjPUdOV8t5ILOnK8EvhkRmyOiv8n6Cf1+LLUIpqvv0fhdIO8G/gK4ZyoPHhFdwN8BN2Xmnqk89tEcI1dHzllmHsjMhUAPcGlEvGsqjnssLeS6D+jNzIuAB3nzb+GTJiJ+A3gpMzdP9rHa0WKuKT9flfdn5iXAh4B/HxG/OpkHK7UIfgyMbPaeallHZeaeg2/tM3MdMCsizpiKY0fELBoX24HM/FqTIR05Z8fK1clzVh3zZ8AGYMmoVYfOV0TMBOYCuzqdKzN3ZeY/VrNfAfqmIM6vAB+JiO3AIPBrEfG3o8Z04nwdM1eHzheZ+ePq60vAGuDSUUMm9Pux1CK4F/hU9eT9vcDuzNzZ6VARcdbB+6IRcSmN/z6TfvGojnkHsDUz/3SMYVN+zlrJ1YlzFhFnRsRp1fTJwAeB50YNuxe4rpq+Gngkq6d8ncw16j7yR2g8d5lUmXlrZvZkZi+NB8GPZOYnRw2b8vPVSq5OnK+IOCUiTj04Dfw6MPqThhP6/Thz3GmnsYhYTePTJGdExBDwWRoPzsjMLwPraDx13wbsBf71NMl1NfA7EbEfeA1YOtnfDJVfAa4FtlT3lwH+M3DuiGydOGet5OrEOTsbWBURM2gUz12Z+fWI+GNgU2beS6PA/iYittH4gMDSSc7Uaq4bI+IjwP4q1/VTkKupaXC+WsnVifPVDayp/n4zE7gzMx+IiM/A5Hw/+ismJKlwpd4akiRVLAJJKpxFIEmFswgkqXAWgSQVziKQpMJZBJJUuP8P26DfQw7QYB4AAAAASUVORK5CYII=\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 365
        },
        "id": "KZgiMGCEZpJn",
        "outputId": "d8146b5a-3b3e-4d2f-89b6-e128b64d0e47"
      },
      "source": [
        "A = np.array([1, -1])\n",
        "B = np.array([1, 5])\n",
        "plt.title(\"Resultant Vector\\nMagnitude:{}\" .format(Magnitude))\n",
        "plt.xlim(-5, 5)\n",
        "plt.ylim(-5, 5)\n",
        "plt.quiver(0, 0, A[0], A[1], angles='xy', scale_units='xy', scale=1, color='red')\n",
        "plt.quiver(A[0], A[1], B[0], B[1], angles='xy', scale_units='xy', scale=1, color='green')\n",
        "R = A + B\n",
        "plt.quiver(0, 0, R[0], R[1], angles='xy', scale_units='xy', scale=1, color='black')\n",
        "plt.grid()\n",
        "plt.show()\n",
        "print(R)\n",
        "Magnitude = np.sqrt(np.sum(R**2))\n",
        "print(Magnitude)\n",
        "Slope = R[1]/R[0]\n",
        "print(Slope)\n",
        "Angle = (np.arctan(Slope))*(180/np.pi)\n",
        "print(Angle)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[2 4]\n",
            "4.47213595499958\n",
            "2.0\n",
            "63.43494882292201\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0NZnAZckHs44",
        "outputId": "15c6412b-97bd-4a4f-a3f1-69dd6d91872d"
      },
      "source": [
        "n = A.shape[0]\n",
        "plt.xlim(-10, 10)\n",
        "plt.ylim(-10, 10)\n",
        "plt.quiver(0,0, A[0], A[1], angles='xy', scale_units='xy',scale=1)\n",
        "plt.quiver(A[0],A[1], B[0], B[1], angles='xy', scale_units='xy',scale=1)\n",
        "plt.quiver(0,0, R[0], R[1], angles='xy', scale_units='xy',scale=1)\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Try plotting Three Vectors and show the Resultant Vector as a result.\n",
        "\n",
        "---\n",
        "\n",
        "\n",
        "Use Head to Tail Method."
      ],
      "metadata": {
        "id": "CXLvKkUPlL3-"
      }
    }
  ]
}